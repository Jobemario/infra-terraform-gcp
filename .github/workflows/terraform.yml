name: Terraform Enterprise Pipeline

on:
  pull_request:
    branches:
      - main
      - staging
      - prod
  push:
    branches:
      - dev

env:
  TF_VERSION: 1.7.5
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: [network, compute, database]
    steps:
      - name: Checkout c贸digo
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure GCP Secret
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "${{ secrets.GCP_DEV_CREDENTIALS }}" > gcp.json
            export GOOGLE_CREDENTIALS=$(cat gcp.json)
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "${{ secrets.GCP_STAGING_CREDENTIALS }}" > gcp.json
            export GOOGLE_CREDENTIALS=$(cat gcp.json)
          fi

      - name: Configure AWS Secret
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_STAGING_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_STAGING_SECRET_ACCESS_KEY }}
          fi

      - name: Terraform Init
        working-directory: modules/${{ matrix.module }}
        run: terraform init

      - name: Terraform Plan
        working-directory: modules/${{ matrix.module }}
        run: terraform plan

      - name: Notify Slack (Plan)
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: '#terraform-notifications'
          text: "Terraform Plan completed for module `${{ matrix.module }}` in PR #${{ github.event.pull_request.number }}"

  dev-apply:
    name: Apply Dev
    runs-on: ubuntu-latest
    needs: terraform-plan
    strategy:
      matrix:
        module: [network, compute, database]
    if: github.ref == 'refs/heads/dev'
    steps:
      - name: Checkout c贸digo
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure GCP Dev
        run: |
          echo "${{ secrets.GCP_DEV_CREDENTIALS }}" > gcp.json
          export GOOGLE_CREDENTIALS=$(cat gcp.json)

      - name: Configure AWS Dev
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}

      - name: Terraform Init
        working-directory: modules/${{ matrix.module }}
        run: terraform init

      - name: Terraform Apply
        working-directory: modules/${{ matrix.module }}
        run: terraform apply -auto-approve

      - name: Notify Slack (Dev Apply)
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: '#terraform-notifications'
          text: "Terraform Apply DEV completed for module `${{ matrix.module }}`"

  staging-apply:
    name: Apply Staging
    runs-on: ubuntu-latest
    needs: terraform-plan
    environment: staging
    strategy:
      matrix:
        module: [network, compute, database]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout c贸digo
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure GCP Staging
        run: |
          echo "${{ secrets.GCP_STAGING_CREDENTIALS }}" > gcp.json
          export GOOGLE_CREDENTIALS=$(cat gcp.json)

      - name: Configure AWS Staging
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_STAGING_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_STAGING_SECRET_ACCESS_KEY }}

      - name: Terraform Init
        working-directory: modules/${{ matrix.module }}
        run: terraform init

      - name: Terraform Apply
        working-directory: modules/${{ matrix.module }}
        run: terraform apply -auto-approve

      - name: Notify Slack (Staging Apply)
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: '#terraform-notifications'
          text: "Terraform Apply STAGING completed for module `${{ matrix.module }}`"

  prod-apply:
    name: Apply Prod
    runs-on: ubuntu-latest
    needs: terraform-plan
    environment: production
    strategy:
      matrix:
        module: [network, compute, database]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout c贸digo
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure GCP Prod
        run: |
          echo "${{ secrets.GCP_PROD_CREDENTIALS }}" > gcp.json
          export GOOGLE_CREDENTIALS=$(cat gcp.json)

      - name: Configure AWS Prod
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}

      - name: Terraform Init
        working-directory: modules/${{ matrix.module }}
        run: terraform init

      - name: Terraform Apply
        working-directory: modules/${{ matrix.module }}
        run: terraform apply -auto-approve

      - name: Notify Slack (Prod Apply)
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: '#terraform-notifications'
          text: "Terraform Apply PROD completed for module `${{ matrix.module }}`"
